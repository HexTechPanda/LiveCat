# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-1.console.aws.amazon.com/ecs/home?region=us-east-1#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: CI/CD Pipeline

#on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: livecat-ecs-cluster-ec2-1                 # set this to your Amazon ECS cluster name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.

        mvn clean verify

        # push livecat-auth
        docker tag livecat-auth:latest 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-auth:latest
        docker push 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-auth:latest

        # push livecat-gateway
        docker tag livecat-gateway:latest 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-gateway:latest
        docker push 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-gateway:latest

        # push livecat-order
        docker tag livecat-order:latest 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-order:latest
        docker push 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-order:latest

        # push livecat-system
        docker tag livecat-system:latest 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-system:latest
        docker push 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-system:latest

        # push livecat-ticket
        docker tag livecat-ticket:latest 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-ticket:latest
        docker push 107366030820.dkr.ecr.us-east-1.amazonaws.com/livecat-ticket:latest

#    - name: Download task definitions
#      run: |
#        aws ecs describe-task-definition --task-definition livecat-gateway --query taskDefinition > livecat-gateway-task-definition.json
#        aws ecs describe-task-definition --task-definition livecat-system --query taskDefinition > livecat-system-task-definition.json
#        aws ecs describe-task-definition --task-definition livecat-auth --query taskDefinition > livecat-auth-task-definition.json
#        aws ecs describe-task-definition --task-definition livecat-ticket --query taskDefinition > livecat-ticket-task-definition.json
#        aws ecs describe-task-definition --task-definition livecat-order --query taskDefinition > livecat-order-task-definition.json

    - name: Restart services
      run: |
        aws ecs update-service --force-new-deployment --service livecat-gateway --cluster ${{ env.ECS_CLUSTER }}
        aws ecs update-service --force-new-deployment --service livecat-system --cluster ${{ env.ECS_CLUSTER }}
        aws ecs update-service --force-new-deployment --service livecat-auth --cluster ${{ env.ECS_CLUSTER }}
        aws ecs update-service --force-new-deployment --service livecat-ticket --cluster ${{ env.ECS_CLUSTER }}
        aws ecs update-service --force-new-deployment --service livecat-order --cluster ${{ env.ECS_CLUSTER }}

#    - name: Deploy Task livecat-gateway
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: livecat-gateway-task-definition.json
#        service: livecat-gateway
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
#
#    - name: Deploy Task livecat-system
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: livecat-system-task-definition.json
#        service: livecat-system
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
#
#    - name: Deploy Task livecat-auth
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: livecat-auth-task-definition.json
#        service: livecat-auth
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
#
#    - name: Deploy Task livecat-ticket
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: livecat-ticket-task-definition.json
#        service: livecat-ticket
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
#
#    - name: Deploy Task livecat-order
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: livecat-order-task-definition.json
#        service: livecat-order
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
